(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{293:function(r,a,t){"use strict";t.r(a);var n=t(14),e=Object(n.a)({},(function(){var r=this,a=r._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[a("h1",{attrs:{id:"javascript"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javascript"}},[r._v("#")]),r._v(" JavaScript")]),r._v(" "),a("h2",{attrs:{id:"数组方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数组方法"}},[r._v("#")]),r._v(" 数组方法")]),r._v(" "),a("h3",{attrs:{id:"静态方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#静态方法"}},[r._v("#")]),r._v(" 静态方法")]),r._v(" "),a("p",[r._v("Array.of()   用参数中的值创建数组\nArray.of(1,2,3,4)   得到的  [1,2,3,4]\nArray.from(object, mapFunction, thisValue)  将类数组对象转成数组\nArray.from({length:5},(_,index)=>index))\t[0, 1, 2, 3, 4]\nArray.isArray()\t判断是否是一个对象")]),r._v(" "),a("h3",{attrs:{id:"迭代器方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#迭代器方法"}},[r._v("#")]),r._v(" 迭代器方法")]),r._v(" "),a("p",[r._v("arr.forEach((item,index)=>{console.log(item,index)})\narr.map()   映射返回一个新数组\narr.filter()   过滤器，返回符合条件的数组\narr.find()  返回元素\narr.findIndex() 返回特定数组元素的下标\narr.every()\t  数组所有元素都满足条件则返回true（惰性）\narr.some()\t数组存在一个元素满足条件（惰性）\narr.reduce()  归并方法\narr.reduce((pre,cur)=>pre+cur,0)   pre代表上一次结果，  cur表示当前数组元素，0代表初始结果。")]),r._v(" "),a("h3",{attrs:{id:"打平方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#打平方法"}},[r._v("#")]),r._v(" 打平方法")]),r._v(" "),a("p",[r._v("arr.flat()\t打平数组，arr.flat(num)， num代表打平层数\narr.flatMap()  先映射数组再进行打平， arr.flatMap(callback)=a.map(f).flat()，[-2,-1,1,2].flatMap(x=>x<0?[]:Math.sqrt(x))")]),r._v(" "),a("h3",{attrs:{id:"连接数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#连接数组"}},[r._v("#")]),r._v(" 连接数组")]),r._v(" "),a("p",[r._v("a.concat(b)\t\t连接   [1,2].concat(4,5)    [1, 2, 4, 5]")]),r._v(" "),a("h3",{attrs:{id:"栈-队列操作数组-改变原数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#栈-队列操作数组-改变原数组"}},[r._v("#")]),r._v(" 栈，队列操作数组（改变原数组）")]),r._v(" "),a("p",[r._v("arr.push()  加最后一个元素\narr.pop()  移除最后一个元素\narr.shift()\t移除第一个元素\narr.unshift()\t加第一个元素")]),r._v(" "),a("h3",{attrs:{id:"处理区域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#处理区域"}},[r._v("#")]),r._v(" 处理区域")]),r._v(" "),a("p",[r._v("arr.slice(start,end)    取出[start,end)元素\narr.splice(start,num,insertA,insertB)  从start位置开始，删除num个元素，在插入insertA，insertB。\na.fill(ele,start,end)    用元素ele去填充[start,end)区域的值，new Array(5).fill(1)   [1,1,1,1,1]")]),r._v(" "),a("h3",{attrs:{id:"数组索引和排序方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数组索引和排序方法"}},[r._v("#")]),r._v(" 数组索引和排序方法")]),r._v(" "),a("p",[r._v("arr.indexOf(a)\t\t元素在数组当中的索引（从前往后数）\narr.lastIndexOf(a)\t  元素在数组当中的索引 （从后往前数）\narr.includes(a)\t\t 数组内是否存在当前元素\narr.sort()\t\t\t数组排序（改变原数组） arr.sort((a,b)=>a-b)  从小到大排序\narr.reverse()\t\t翻转数组（改变原数组）\narr.join()\t\t\t将数组转换成字符串（默认以 , 进行分隔）")]),r._v(" "),a("p",[r._v("改变原数组的方法")]),r._v(" "),a("ul",[a("li",[r._v("push()")]),r._v(" "),a("li",[r._v("pop()")]),r._v(" "),a("li",[r._v("shift()")]),r._v(" "),a("li",[r._v("unshift()")]),r._v(" "),a("li",[r._v("splice()")]),r._v(" "),a("li",[r._v("sort()")]),r._v(" "),a("li",[r._v("reverse()")])]),r._v(" "),a("h2",{attrs:{id:"字符串"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串"}},[r._v("#")]),r._v(" 字符串")]),r._v(" "),a("h3",{attrs:{id:"和数组一样的方法-数组和字符串都有length属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#和数组一样的方法-数组和字符串都有length属性"}},[r._v("#")]),r._v(" 和数组一样的方法   （数组和字符串都有length属性）")]),r._v(" "),a("p",[r._v("s1.concat(s2)\ns1.indexOf('a') | s1.indexOf('hello world')  没有返回-1\ns1.lastIndexOf('a') | s1.lastIndexOf('hello world')\ns1.includes('hello')\ns1.slice(start,end)     [start,end) 下标   和substring用法一样，不过slice支持-1，substring不支持")]),r._v(" "),a("h3",{attrs:{id:"匹配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#匹配"}},[r._v("#")]),r._v(" 匹配")]),r._v(" "),a("p",[r._v("s1.substring(start,end) [start,end) 下标\ns1.substr(start,num)  从下标start开始，返回num个字符\ns1.charAt(2)   返回下标为2的字符\ns1.match(regexp)   返回存放结果的数组[]或者null\ns1.search(searchvalue)   返回searchvalue起始位置\ns1.replace(searchvalue,newvalue)   用newvalue替换searchvalue，只替换一次，返回替换之后的结果\ns1.replaceAll(searchvalue,newvalue)   用newvalue替换searchvalue，替换多次，返回替换之后的结果\ns1.startsWith(searchvalue, ?start)    检测s1是否是以searchvalue开头，从start位置开始检测")]),r._v(" "),a("h3",{attrs:{id:"其他"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他"}},[r._v("#")]),r._v(" 其他")]),r._v(" "),a("p",[r._v('s1.split("-")   将字符串转成数组\ns1.repeat(num)  将s1重复num次')]),r._v(" "),a("h3",{attrs:{id:"工具"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#工具"}},[r._v("#")]),r._v(" 工具")]),r._v(" "),a("p",[r._v("s1.toLowerCase()  转小写\ns1.toUpperCase()  转大写\ns1.trim()  去除两边空白\nvalueOf()\ntoString()")]),r._v(" "),a("h2",{attrs:{id:"数组扁平化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数组扁平化"}},[r._v("#")]),r._v(" 数组扁平化")]),r._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[r._v("最简单的\nfunction flatArr(arr){\n    return arr.flat(Infinity)\n}\n\n// 利用 concat 进行递归\nfunction flatArr(arr){\n    let result = []\n    for (let i = 0; i < arr.length; i++) {\n        result = Array.isArray(arr[i]) ? result.concat(flatArr(arr[i])) : result.concat(arr[i])\n    }\n    return result\n}\n\n// 利用 扩展运算符 ...\nfunction flatArr(arr){\n    for (let i = 0; i < arr.length; i++) {\n        if(Array.isArray(arr[i])){\n            arr = [].concat(...arr)\n        }\n    }\n    return arr\n}\n\n//  利用 flat\nfunction flatArr(arr){\n    for (let i = 0; i < arr.length; i++) {\n        if(Array.isArray(arr[i])){\n            arr = arr.flat(1)  // 与 ... 相比就是改成 flat 了\n        }\n    }\n    return arr\n}\n\nfunction flatArr(arr){\n    while(arr.some(item=>Array.isArray(item))){  // 更加简洁\n        arr = arr.flat()\n    }\n    return arr\n}\n\n// 利用reduce\nfunction flatArr(arr){\n    return arr.reduce((pre,cur)=>\n        pre.concat(Array.isArray(cur)? flatArr(cur):cur)\n    ,[])\n}\n")])])]),a("h2",{attrs:{id:"数组去重"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数组去重"}},[r._v("#")]),r._v(" 数组去重")]),r._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[r._v("// 利用set\nfunction unique(arr){\n    return Array.from(new Set(arr))\n}\n\n// 利用splice\nfunction unique(arr){\n    for (let i = 0; i < arr.length; i++) {\n        for (let j = i + 1; j < arr.length; j++) {\n            if(arr[i] === arr[j]){\n                arr.splice(i,1)\n                j--\n            }\n        }\n    }\n    return arr\n}\n// filter\nfunction unique(arr){\n    return arr.filter((item,index)=>{\n        return arr.indexOf(item) === index\n    })\n}\n// 利用indexOf 或者 includes ，开辟一个新数组\nfunction unique(arr){\n    let res = []\n    for (let item of arr) {\n        if(!res.includes(item)){  // if(res.indexOf(item) === -1)\n            res.push(item)\n        }\n    }\n    return res\n}\n// sort\nfunction unique(arr) {\n    arr = arr.sort()\n    var arrry= [arr[0]];\n    for (var i = 1; i < arr.length; i++) {\n    \tif (arr[i] !== arr[i-1]) {\n    \t\tarrry.push(arr[i]);\n     \t}\n     }\n    return arrry;\n}\n\n")])])])])}),[],!1,null,null,null);a.default=e.exports}}]);